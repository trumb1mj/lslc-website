/* jshint ignore:start */

/* jshint ignore:end */

define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  var App;

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default']
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  exports['default'] = App;

});
define('dummy/components/code-snippet', ['exports', 'ember', 'dummy/snippets'], function (exports, Ember, Snippets) {

  'use strict';

  var Highlight = require("highlight.js");

  exports['default'] = Ember['default'].Component.extend({
    tagName: "pre",
    classNameBindings: ["language"],
    unindent: true,

    _unindent: function _unindent(src) {
      if (!this.get("unindent")) {
        return src;
      }
      var match,
          min,
          lines = src.split("\n");
      for (var i = 0; i < lines.length; i++) {
        match = /^\s*/.exec(lines[i]);
        if (match && (typeof min === "undefined" || min > match[0].length)) {
          min = match[0].length;
        }
      }
      if (typeof min !== "undefined" && min > 0) {
        src = src.replace(new RegExp("(\\n|^)\\s{" + min + "}", "g"), "$1");
      }
      return src;
    },

    source: Ember['default'].computed("name", function () {
      return this._unindent((Snippets['default'][this.get("name")] || "").replace(/^(\s*\n)*/, "").replace(/\s*$/, ""));
    }),

    didInsertElement: function didInsertElement() {
      Highlight.highlightBlock(this.get("element"));
    },

    language: Ember['default'].computed("name", function () {
      var m = /\.(\w+)$/i.exec(this.get("name"));
      if (m) {
        switch (m[1].toLowerCase()) {
          case "js":
            return "javascript";
          case "hbs":
            return "handlebars";
        }
      }
    })
  });

});
define('dummy/components/current-user', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var User = Ember['default'].Object.extend({
    username: null,
    firstName: null,
    lastName: null,
    fullName: Ember['default'].computed('firstName', 'lastName', function () {
      return Ember['default'].A([this.get('firstName'), this.get('lastName')]).compact().join(' ');
    })
  });

  exports['default'] = Ember['default'].Component.extend({
    user: User.create({
      username: 'krisselden',
      firstName: 'Kris',
      lastName: 'Selden'
    })
  });

});
define('dummy/components/ember-wormhole', ['exports', 'ember-wormhole/components/ember-wormhole'], function (exports, Component) {

	'use strict';

	exports['default'] = Component['default'];

});
define('dummy/controllers/application', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var set = Ember['default'].set;

  exports['default'] = Ember['default'].Controller.extend({
    isShowingModal: false,
    isShowingSidebarContent: false,
    sidebarId: 'sidebar',
    isInPlace: false,
    actions: {
      toggleModal: function toggleModal() {
        this.toggleProperty('isShowingModal');
      },
      toggleSidebarContent: function toggleSidebarContent() {
        this.toggleProperty('isShowingSidebarContent');
      },
      switchSidebars: function switchSidebars() {
        var otherSidebarId = this.sidebarId === 'sidebar' ? 'othersidebar' : 'sidebar';
        set(this, 'sidebarId', otherSidebarId);
      },
      toggleInPlace: function toggleInPlace() {
        this.toggleProperty('isInPlace');
      }
    }
  });

});
define('dummy/ember-wormhole/tests/modules/ember-wormhole/components/ember-wormhole.jshint', function () {

  'use strict';

  module('JSHint - modules/ember-wormhole/components');
  test('modules/ember-wormhole/components/ember-wormhole.js should pass jshint', function () {
    ok(true, 'modules/ember-wormhole/components/ember-wormhole.js should pass jshint.');
  });

});
define('dummy/initializers/add-modals-element', ['exports'], function (exports) {

  'use strict';

  /*globals document*/
  function initialize(container, application) {
    var rootEl = document.querySelector(application.rootElement);
    var modalContainerEl = document.createElement('div');
    var modalContainerElId = 'modals';
    modalContainerEl.id = modalContainerElId;
    rootEl.appendChild(modalContainerEl);
  }

  exports['default'] = {
    name: 'add-modals-element',
    initialize: initialize
  };

});
define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {

  'use strict';

  var classify = Ember['default'].String.classify;
  var registered = false;

  exports['default'] = {
    name: 'App Version',
    initialize: function initialize(container, application) {
      if (!registered) {
        var appName = classify(application.toString());
        Ember['default'].libraries.register(appName, config['default'].APP.version);
        registered = true;
      }
    }
  };

});
define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize(container, application) {
    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);

    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {
      window[classifiedName] = application;
    }
  }

  ;

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };

});
define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  var Router = Ember['default'].Router.extend({
    location: config['default'].locationType
  });

  Router.map(function () {});

  exports['default'] = Router;

});
define('dummy/snippets', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    "modal.hbs": "{{#current-user as |user|}}\n  <button {{action 'toggleModal'}}>Toggle Modal</button>\n  <label>\n    Username: {{input value=user.username class=\"username\"}}\n  </label>\n  {{#if isShowingModal}}\n    {{#ember-wormhole to='modals'}}\n      <div class=\"overlay\" {{action 'toggleModal'}}></div>\n      <div class=\"dialog\">\n        <h1>Hi, I'm a simple modal dialog</h1>\n        <p>Here we have some content which is bound from the context\n          where the wormhole component was used: \"{{user.username}}\"</p>\n        <button {{action 'toggleModal'}}>Close</button>\n      </div>\n    {{/ember-wormhole}}\n  {{/if}}\n{{/current-user}}\n",
    "sidebar.hbs": "{{#current-user as |user|}}\n  <button {{action 'toggleSidebarContent'}}>Toggle Sidebar Content</button>\n  <label>\n    First Name: {{input value=user.firstName class=\"first-name\"}}\n  </label>\n  <label>\n    Last Name: {{input value=user.lastName class=\"last-name\"}}\n  </label>\n  {{#if isShowingSidebarContent}}\n    {{#ember-wormhole to='sidebar' renderInPlace=isInPlace}}\n      <h1>Epic sidebar action</h1>\n      <p>Here we have some content which is bound from the context\n        where the wormhole component was used: \"{{user.fullName}}\"</p>\n      <button {{action 'toggleSidebarContent'}}>Hide Sidebar Content</button>\n    {{/ember-wormhole}}\n  {{/if}}\n{{/current-user}}\n"
  };

});
define('dummy/templates/application', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.13.0-beta.1+canary.5f4cfbc7",
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","overlay");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","dialog");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("h1");
              var el3 = dom.createTextNode("Hi, I'm a simple modal dialog");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("p");
              var el3 = dom.createTextNode("Here we have some content which is bound from the context\n            where the wormhole component was used: \"");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\"");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              var el3 = dom.createTextNode("Close");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1]);
              var element6 = dom.childAt(fragment, [3]);
              var element7 = dom.childAt(element6, [5]);
              var morphs = new Array(3);
              morphs[0] = dom.createElementMorph(element5);
              morphs[1] = dom.createMorphAt(dom.childAt(element6, [3]),1,1);
              morphs[2] = dom.createElementMorph(element7);
              return morphs;
            },
            statements: [
              ["element","action",["toggleModal"],[]],
              ["content","user.username"],
              ["element","action",["toggleModal"],[]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.13.0-beta.1+canary.5f4cfbc7",
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ember-wormhole",[],["to","modals"],0,null]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.13.0-beta.1+canary.5f4cfbc7",
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("Toggle Modal");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createTextNode("\n      Username: ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element8 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createElementMorph(element8);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
          morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
          morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["element","action",["toggleModal"],[]],
          ["inline","input",[],["value",["subexpr","@mut",[["get","user.username"]],[]],"class","username"]],
          ["inline","code-snippet",[],["name","modal.hbs"]],
          ["block","if",[["get","isShowingModal"]],[],0,null]
        ],
        locals: ["user"],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.13.0-beta.1+canary.5f4cfbc7",
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h1");
              var el2 = dom.createTextNode("Epic sidebar action");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              var el2 = dom.createTextNode("Here we have some content which is bound from the context\n          where the wormhole component was used: \"");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\"");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              var el2 = dom.createTextNode("Hide Sidebar Content");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              var el2 = dom.createTextNode("Switch Sidebars From Within");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [5]);
              var element1 = dom.childAt(fragment, [7]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
              morphs[1] = dom.createElementMorph(element0);
              morphs[2] = dom.createElementMorph(element1);
              return morphs;
            },
            statements: [
              ["content","user.fullName"],
              ["element","action",["toggleSidebarContent"],[]],
              ["element","action",["switchSidebars"],[]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.13.0-beta.1+canary.5f4cfbc7",
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ember-wormhole",[],["to",["subexpr","@mut",[["get","sidebarId"]],[]],"id","sidebarWormhole","renderInPlace",["subexpr","@mut",[["get","isInPlace"]],[]]],0,null]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.13.0-beta.1+canary.5f4cfbc7",
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("Toggle Sidebar Content");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("Switch Sidebars From Without");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("Toggle In Place");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createTextNode("\n      First Name: ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createTextNode("\n      Last Name: ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(fragment, [3]);
          var element4 = dom.childAt(fragment, [5]);
          var morphs = new Array(7);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createElementMorph(element3);
          morphs[2] = dom.createElementMorph(element4);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [7]),1,1);
          morphs[4] = dom.createMorphAt(dom.childAt(fragment, [9]),1,1);
          morphs[5] = dom.createMorphAt(fragment,11,11,contextualElement);
          morphs[6] = dom.createMorphAt(fragment,13,13,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["element","action",["toggleSidebarContent"],[]],
          ["element","action",["switchSidebars"],[]],
          ["element","action",["toggleInPlace"],[]],
          ["inline","input",[],["value",["subexpr","@mut",[["get","user.firstName"]],[]],"class","first-name"]],
          ["inline","input",[],["value",["subexpr","@mut",[["get","user.lastName"]],[]],"class","last-name"]],
          ["inline","code-snippet",[],["name","sidebar.hbs"]],
          ["block","if",[["get","isShowingSidebarContent"]],[],0,null]
        ],
        locals: ["user"],
        templates: [child0]
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.13.0-beta.1+canary.5f4cfbc7",
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        dom.setAttribute(el1,"id","title");
        var el2 = dom.createTextNode("ember-wormhole");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("aside");
        dom.setAttribute(el1,"id","sidebar");
        dom.setAttribute(el1,"class","sidebar");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("aside");
        dom.setAttribute(el1,"id","othersidebar");
        dom.setAttribute(el1,"class","sidebar");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","example");
        var el2 = dom.createTextNode("\n  Welcome. This ember-cli addon provides a component that allows for rendering\n  a block in a typical Ember context in terms of bound data and action handling,\n  but attached to a DOM element somewhere else on the page.\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","example");
        var el2 = dom.createTextNode("\n  The example app you are looking at includes an intializer which adds a div\n  to the body element of this document with an ID of ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("modals");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(".\n  It also has a sidebar with an element with an ID of ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("sidebar");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(".\n  Finally, there is a ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("current-user");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" component, which yields a\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("user");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" object and is used to demonstrate bound values across\n  the wormhole boundary.\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","example");
        dom.setAttribute(el1,"id","example-modal");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h2");
        var el3 = dom.createTextNode("Modal Example");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","example");
        dom.setAttribute(el1,"id","example-sidebar");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h2");
        var el3 = dom.createTextNode("Sidebar Example");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [12]),3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [14]),3,3);
        return morphs;
      },
      statements: [
        ["content","outlet"],
        ["block","current-user",[],[],0,null],
        ["block","current-user",[],[],1,null]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('dummy/templates/components/code-snippet', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.13.0-beta.1+canary.5f4cfbc7",
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","source"]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/templates/components/current-user', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.13.0-beta.1+canary.5f4cfbc7",
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","yield",[["get","user"]],[]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/tests/acceptance/wormhole-test', ['ember', 'qunit', 'dummy/tests/helpers/start-app'], function (Ember, QUnit, startApp) {

  'use strict';

  var application;
  var assert = QUnit['default'].assert;

  assert.contentIn = function (sidebarId, content) {
    content = content || 'h1';
    this.equal(findWithAssert('#' + sidebarId + ' ' + content).length, 1, 'content is visible in sidebar #' + sidebarId);
  };
  assert.contentNotIn = function (sidebarId, content) {
    content = content || 'h1';
    this.equal(find('#' + sidebarId + ' ' + content).length, 0, 'content is not visible in sidebar #' + sidebarId);
  };

  QUnit.module('Acceptance: Wormhole', {
    beforeEach: function beforeEach() {
      application = startApp['default']();
    },

    afterEach: function afterEach() {
      Ember['default'].run(application, 'destroy');
    }
  });

  QUnit.test('modal example', function (assert) {
    visit('/');
    andThen(function () {
      assert.equal(currentPath(), 'index');
    });
    click('button:contains(Toggle Modal)');
    andThen(function () {
      assert.equal(Ember['default'].$('#modals .overlay').length, 1, 'overlay is visible');
      assert.equal(Ember['default'].$('#modals .dialog').length, 1, 'dialog is visible');
    });
    click('#modals .overlay');
    andThen(function () {
      assert.equal(Ember['default'].$('#modals .overlay').length, 0, 'overlay is not visible');
      assert.equal(Ember['default'].$('#modals .dialog').length, 0, 'dialog is not visible');
    });
    fillIn('.username', 'coco');
    click('button:contains(Toggle Modal)');
    andThen(function () {
      assert.equal(Ember['default'].$('#modals .dialog p:contains(coco)').length, 1, 'up-to-date username is shown in dialog');
    });
  });

  QUnit.test('sidebar example', function (assert) {
    var sidebarWormhole;
    var header1, header2;
    var sidebarFirstNode1, sidebarFirstNode2;

    visit('/');
    andThen(function () {
      assert.equal(currentPath(), 'index');
    });
    click('button:contains(Toggle Sidebar Content)');
    andThen(function () {
      sidebarWormhole = Ember['default'].View.views.sidebarWormhole;
      sidebarFirstNode1 = sidebarWormhole._firstNode;
      header1 = Ember['default'].$('#sidebar h1');
      assert.contentIn('sidebar');
    });
    fillIn('.first-name', 'Ray');
    fillIn('.last-name', 'Cohen');
    andThen(function () {
      assert.contentIn('sidebar', 'p:contains(Ray Cohen)');
    });
    click('#sidebar button:contains(Switch)');
    andThen(function () {
      sidebarFirstNode2 = sidebarWormhole._firstNode;
      header2 = Ember['default'].$('#othersidebar h1');
      assert.equal(header1.text(), header2.text(), 'same header text');
      assert.ok(header1.is(header2), 'same header elements'); // appended elsewhere
      assert.ok(sidebarFirstNode1.isSameNode(sidebarFirstNode2), 'different first nodes'); // appended elsewhere
      assert.contentNotIn('sidebar');
      assert.contentIn('othersidebar');
    });
    click('#othersidebar button:contains(Switch)');
    andThen(function () {
      assert.contentIn('sidebar');
      assert.contentNotIn('othersidebar');
    });
    click('#sidebar button:contains(Hide)');
    andThen(function () {
      assert.contentNotIn('sidebar');
      assert.contentNotIn('othersidebar');
    });
  });

  QUnit.test('sidebar example in place', function (assert) {
    visit('/');
    click('button:contains(Toggle Sidebar Content)');
    andThen(function () {
      assert.contentIn('sidebar');
      assert.contentNotIn('othersidebar');
      assert.contentNotIn('example-sidebar');
    });
    click('button:contains(Toggle In Place)');
    andThen(function () {
      assert.contentNotIn('sidebar');
      assert.contentNotIn('othersidebar');
      assert.contentIn('example-sidebar');
    });
    click('button:contains(Switch Sidebars From Without)');
    andThen(function () {
      assert.contentNotIn('sidebar');
      assert.contentNotIn('othersidebar');
      assert.contentIn('example-sidebar');
    });
    click('button:contains(Toggle In Place)');
    andThen(function () {
      assert.contentNotIn('sidebar');
      assert.contentIn('othersidebar');
      assert.contentNotIn('example-sidebar');
    });
    click('#othersidebar button:contains(Hide)');
    andThen(function () {
      assert.contentNotIn('sidebar');
      assert.contentNotIn('othersidebar');
      assert.contentNotIn('example-sidebar');
    });
  });

  QUnit.test('survives rerender', function (assert) {
    var sidebarWormhole;
    var header1, header2;
    var sidebarFirstNode1, sidebarFirstNode2;

    visit('/');
    andThen(function () {
      assert.equal(currentPath(), 'index');
    });

    click('button:contains(Toggle Sidebar Content)');
    andThen(function () {
      sidebarWormhole = Ember['default'].View.views.sidebarWormhole;
      sidebarFirstNode1 = sidebarWormhole._firstNode;
      header1 = Ember['default'].$('#sidebar h1');
      assert.contentIn('sidebar');
    });

    fillIn('.first-name', 'Ringo');
    fillIn('.last-name', 'Starr');
    andThen(function () {
      assert.contentIn('sidebar', 'p:contains(Ringo Starr)');
    });

    andThen(function () {
      sidebarWormhole.rerender();
    });

    andThen(function () {
      sidebarFirstNode2 = sidebarWormhole._firstNode;
      header2 = Ember['default'].$('#sidebar h1');
      assert.contentIn('sidebar', 'p:contains(Ringo Starr)');
      assert.equal(header1.text(), header2.text(), 'same header text');
      assert.ok(!header1.is(header2), 'different header elements'); // rerendered
      assert.ok(!sidebarFirstNode1.isSameNode(sidebarFirstNode2), 'different first nodes'); // rerendered
    });
  });

  QUnit.test('throws if destination element not in DOM', function (assert) {
    visit('/');
    andThen(function () {
      Ember['default'].$('#sidebar').remove();
    });
    var wormholeToMissingSidebar = function wormholeToMissingSidebar() {
      Ember['default'].$('button:contains(Toggle Sidebar Content)').click();
    };
    andThen(function () {
      assert.throws(wormholeToMissingSidebar, /ember-wormhole failed to render into/, 'throws on missing destination element');
    });
  });

  QUnit.test('throws if destination element id falsy', function (assert) {
    visit('/');
    var wormholeToNowhere = function wormholeToNowhere() {
      application.__container__.lookup('controller:application').set('sidebarId', null);
      Ember['default'].$('button:contains(Toggle Sidebar Content)').click();
    };
    andThen(function () {
      assert.throws(wormholeToNowhere, /ember-wormhole failed to render content because the destinationElementId/, 'throws on missing destination element id');
    });
  });

});
define('dummy/tests/acceptance/wormhole-test.jshint', function () {

  'use strict';

  module('JSHint - acceptance');
  test('acceptance/wormhole-test.js should pass jshint', function() { 
    ok(true, 'acceptance/wormhole-test.js should pass jshint.'); 
  });

});
define('dummy/tests/app.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('app.js should pass jshint', function() { 
    ok(true, 'app.js should pass jshint.'); 
  });

});
define('dummy/tests/components/current-user.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/current-user.js should pass jshint', function() { 
    ok(true, 'components/current-user.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/application.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/application.js should pass jshint', function() { 
    ok(true, 'controllers/application.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('dummy/tests/helpers/resolver.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/resolver.js should pass jshint', function() { 
    ok(true, 'helpers/resolver.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, Application, Router, config) {

  'use strict';



  exports['default'] = startApp;
  function startApp(attrs) {
    var application;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function () {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }

});
define('dummy/tests/helpers/start-app.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/start-app.js should pass jshint', function() { 
    ok(true, 'helpers/start-app.js should pass jshint.'); 
  });

});
define('dummy/tests/initializers/add-modals-element.jshint', function () {

  'use strict';

  module('JSHint - initializers');
  test('initializers/add-modals-element.js should pass jshint', function() { 
    ok(true, 'initializers/add-modals-element.js should pass jshint.'); 
  });

});
define('dummy/tests/router.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('router.js should pass jshint', function() { 
    ok(true, 'router.js should pass jshint.'); 
  });

});
define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

	'use strict';

	ember_qunit.setResolver(resolver['default']);

});
define('dummy/tests/test-helper.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('test-helper.js should pass jshint', function() { 
    ok(true, 'test-helper.js should pass jshint.'); 
  });

});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"name":"ember-wormhole","version":"0.3.1.b54bf1c5"});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map